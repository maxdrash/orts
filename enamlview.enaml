from enaml.layout.api import spacer, grid
from enaml.widgets.api import (
    Window, Label, Separator, Field, Form, VGroup, CheckBox, SpinBox, PushButton,
    Container, HGroup
)
from enaml.styling import StyleSheet, Style, Setter
from utils.gui import load_icon


enamldef PlayerView(Container):
    attr number
    attr player

    padding = 5

    constraints = [
        grid(
            [playerLabel, name, country, score, win ],
            [teamLabel,   team, team,    team,  team],
            column_align='width',
            row_align='v_center',
            column_spacing=5,
            row_spacing=5,
        ),
        country.width == 35,
        score.width == 40,
    ]

    Label: playerLabel:
        text = f"Player {number}"
    Field: name:
        text := player.name

    Field: country:
        text := player.country

    SpinBox: score:
        value := player.score

    Label: teamLabel:
        text = f"Team {number}"
    Field: team:
        text := player.team

    PushButton: win:
        text = f"P&{number} Wins"
        tool_tip = f"huge-ass button to increase score by 1"
        clicked :: player.score += 1


enamldef Main(Window):
    title = 'Overly Repetitive Tedious Software'
    icon = load_icon('gui_assets/icon-256.png')
    attr state

    VGroup:
        padding = 0
        spacing = 0

        Form:
            padding = 5
            Label:
                text = 'Match description'
            Field:
                text := state.match_description

        PlayerView:
            player := state.player1
            number = "1"

        PlayerView:
            player := state.player2
            number = "2"

        HGroup:
            padding = 5

            PushButton:
                text = "▶ &Apply"

            PushButton:
                text = "✖ &Discard"

            PushButton:
                text = "↶ &Reset scores"
                clicked :: state.player1.score = 0; state.player2.score = 0

            PushButton:
                text = "⇄ &Swap players"
                clicked :: state.player1, state.player2 = state.player2, state.player1
